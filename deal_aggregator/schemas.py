from pydantic import BaseModel, Field
from typing import List, Optional
from bson import ObjectId
import datetime

# --- Pydantic helper for MongoDB's ObjectId ---
# This allows us to use ObjectId in our Pydantic models and have it
# validated and serialized correctly.
class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v, *args, **kwargs):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return ObjectId(v)

    @classmethod
    def __get_pydantic_json_schema__(cls, schema, *args, **kwargs):
        schema.update(type="string")


# --- Deal Schemas ---

# This is the main model that represents a deal document in the database.
# It includes the `_id` field from MongoDB, aliased as `id`.
class Deal(BaseModel):
    id: PyObjectId = Field(default_factory=PyObjectId, alias="_id")
    product_id: str
    title: str
    image: Optional[str] = None
    price: float
    original_price: float
    discount: float
    url: str
    source: str
    category: str
    reddit_post_id: str
    created_at: datetime.datetime = Field(default_factory=datetime.datetime.utcnow)
    clicks: int = 0

    class Config:
        populate_by_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}

# This model is used when creating a new deal.
# It doesn't include fields that are auto-generated by the database like `id`, `created_at`, or `clicks`.
class DealCreate(BaseModel):
    product_id: str
    title: str
    image: Optional[str] = None
    price: float
    original_price: float
    discount: float
    url: str
    source: str
    category: str
    reddit_post_id: str

# This model is used for updating a deal.
# All fields are optional, so you only need to provide the ones you want to change.
class DealUpdate(BaseModel):
    title: Optional[str] = None
    image: Optional[str] = None
    price: Optional[float] = None
    original_price: Optional[float] = None
    discount: Optional[float] = None
    url: Optional[str] = None
    category: Optional[str] = None
    reddit_post_id: Optional[str] = None


# --- Category Schema ---
class Category(BaseModel):
    id: str = Field(..., alias="_id")
    count: int
